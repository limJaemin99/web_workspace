● Day03 _ 08.09


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[jsp 내장 객체]

	▶ Application > Session > Request > Page ◀
	★ jsp:useBean 의 기본 scope="page" 이다 ★
		★ 여기서 page 는 pageContext 이다★
	★ jsp:useBean 으로 생성된 자바빈 id 는 일반 변수와는 다르게 부른다 ★
		★ 자바빈은 Attribute 라고도 부를 수 있다 ★
		★★★ ${} (EL)기호를 사용하여 값을 가져올 수 있다 ★★★
			- getXXX, getter 대신에 필드 이름만 작성해서 실행
	★ jsp:useBean 은 자바빈 생성은 setAttribute("이름","값") 메소드 ★
	★ jsp:useBean 은 자바빈 사용은 getAttribute("받을 주소") 메소드 ★
		
● pageContext scope : javax.servlet.jsp.PageContext
	- JSP 페이지에 대한 정보를 저장하고 있는 객체
	- 현재 jsp 페이지 안에서만 정보를 유지한다.
	
● request scope : javax.servlet.http.HttpServletRequest
	- 웹 브라우저의 요청 정보를 저장하고 있는 객체
	- 하나의 요청이 끝날때까지 정보를 유지한다.
	- A.jsp 의 요청을 다른 B.jsp 로 전달할 수 있다.
	
● session scope : javax.servlet.http.HttpSession
	- 하나의 웹 브라우저의 정보(세션 정보)를 저장하고 있는 객체
	- 브라우저가 종료될 때까지  정보를 유지한다.
	
● application scope : javax.servlet.ServletContext
	- 웹 애플리케이션(Context) 정보를 저장하고 있는 객체
	- 서버가 종료될 때까지 정보를 유지한다.
	
------------------------------------------------------------

● response : javax.servlet.http.HttpservletResponse
	- 웹 브라우저의 요청에 대한 응답 정보를 저장하고 있는 객체
	
● out : javax.servlet.jsp.jspWriter
	- JSP 페이지(html 문서) 출력 스트림 객체
	
------------------------------------------------------------

● page : java.lang.Object
	- JSP 페이지에 대한 자바 클래스 객체

● config : javax.servlet.SetvletConfig
	- JSP 페이지에 대한 설정 정보를 저장하고 있는 객체
	
● exception : java.lang.Throwable
	- JSP 페이지에서 예외가 발생한 경우에 사용되는 객체



jsp 의 scope 이 무엇인지 / 종류 7가지 (이름,타입,의미)
● scope 이란 ? 데이터를 사용할 수 있는 범위/영역
● Application > Session > Request > Page
	- Application : 모든 페이지에서 유효(모든 사용자 접근)
	- Session : 모든 페이지에서 유효(사용자 개별 접근,시간)
	- request : 서로 연결되어 있는 페이지에서만 유효
	- page : 현재 페이지에서만 유효

● Page Scope(페이지 스코프)
	▶ 이름 : page
	▶ 타입 : pageContext
		- 현재 JSP 페이지 내에서만 변수가 유효, 해당 페이지 내의 여러곳에서 접근 가능
		- 페이지가 렌더링되는 동안 변수는 유지, 다른 페이지로 이동시 변수는 소멸

● Request scope(요청 스코프)
	▶ 이름 : request
	▶ 타입 : ServletRequest
		- 하나의 HTTP 요청 내에서 변수가 유효, 같은 요청 내에서 여러 페이지/컴포넌트에서 접근 가능
		- 다른 요청으로 넘어가면 변수는 소멸

● Session scope(세션 스코프)
	▶ 이름 : session
	▶ 타입 : HttpSession
		- 사용자의 세션이 유지되는동안 변수가 유효
		- 로그아웃/세션 만료시 변수는 소멸
		- 같은 사용자가 다른 페이지로 이동해도 세션 스코프 변수는 유지

● Application scope(애플리케이션 스코프)
	▶ 이름 : application
	▶ 타입 : ServletContext
		- 웹 애플리케이션이 실행되는 동안 변수가 유효
		- 서버가 실행중인 동안 모든 사용자에게 공통적으로 접근 가능한 변수
		
● Page Attribute scope(페이지 속성 스코프)
	▶ 이름 : pageScope
	▶ 타입 : Object
		- 페이지 속성(attribute)을 가져올 수 있는 스코프
		- 현재 JSP 페이지 내에서 설정한 페이지 속성 값을 가져올 수 있다.
		
● Request Parameter scope(요청 매개변수 스코프)
	▶ 이름 : param
	▶ 타입 : String
		- 요청 매개변수(parameter)의 값을 가져올 수 있는 스코프
		- URL 쿼리 문자열이나 POST 요청의 매개변수 값을 가져올 수 있다.

● Request Attribute scope(요청 속성 스코프)
	▶ 이름 : requestScope
	▶ 타입 : Object
		- 요청 속성(attribute)을 가져올 수 있는 스코프
		- 서블릿이나 JSP에서 설정한 요청 속성 값을 가져올 수 있다.

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. 10scopeTest.jsp  +  11main.jsp  +  12useBean.jsp
	- Application,Session,page scope 연습
	
2. 11main.jsp  +  13forward.jsp
	- <jsp:forward> 연습

3. 11main.jsp  +  13forward.jsp  +  14beanForward.jsp
	-request scope 연습

4. 10scopeTest.jsp
	- Attribute 연습

5. [css] hrd 의 css 파일 복사  +  15MemberUpdate.jsp  +  [member] update.jsp  +  updateView.jsp
	- 기존 getParameter() 로 받아온 내용을 useBean 의 Attribute 로 변경

6. list.jsp  +  listView.jsp
	- 5번 내용 복습


# ${} (EL)기호는 <!--  --> html 주석 안에 사용할 수 없다.	★★★★★★★★★★★★★★★★★★★★★
# ${} (EL)기호는 <%--  --%> jsp 주석 안에 사용해야한다.		★★★★★★★★★★★★★★★★★★★★★

-------------------------------------------------------------
※ scope="request" 일 경우 forward 가 [반드시] 같이 사용된다.
	- servlet 을 이용해서 개발하면 '처리' 와 '화면 출력(view)'이  파일이 분리된다.
		● '처리' ▶ 'survlet'	 	- .java 로 구현 (지금은 먼저 '처리'기능을 .jsp 로 분리해서 연습하는 중)
		● '화면출력' ▶ jsp			- .jsp 로 구현
	ex) MemberList.jsp 가 List.java 에서 DAO 실행하고 listView.jsp 에서 화면 출력한다.
		이때, List.java 에서 listView.jsp 로 forward 가 되고, 데이터도 전달한다.
			 List.java 에 URL 을 정해준다.
			 	ex) list.do	(여기에서 .do 는 '임의'로 붙이는 확장자)
			 		ex) list.nhn
-------------------------------------------------------------
# 앞으로 배울 진도
1. jsp/servlet 의 객체 위주
2. jdbc 의 PreparedStatement 인터페이스 사용을 mybatis 프레임워크로 변경
3. 외부 라이브러리는 최종적으로 build - 배포파일을 만들 때 사용
	▶ 빌드 도구 (빌드 자동화) : maven(xml) , gradle(kotlin)
4. 게시판(소스 파일) 만들기 
