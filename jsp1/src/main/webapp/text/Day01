● Day01 _ 08.07

1. 1start.jsp
	- memberDAO 의 selectAll() 로 배열을 가져와 출력하기
	
2. [hrd] - memberList.jsp
	- 위에서 배운 내용으로 기존 memberList.html을 jsp 파일로 만들어보기
	
3. 2request.jsp
	- 서버/클라이언트의 주소

4. 3parameterSend.jsp  +  3parameterReceive.jsp
	- request 의 파라미터 사용

5. [hrd] - memberUpdate.jsp
	- 위에서 배운 내용으로 기존 memberUpdate.html을 jsp 파일로 만들어보기 




# 웹 애플리케이션 프로젝트를 만들때의 ★★★중요사항★★★
	1) 자바 소스파일 '.java'는 [Java Resources 항목]에서 파일을 생성하기
	
	2) 웹과 관련된 정적파일 'html,CSS,Js,이미지 파일'은 [webapp 폴더]에 생성하기
	
	3) 웹과 관련된 동적파일 'jsp' 는 [webapp 폴더]에 생성
		▶ jsp를 사용하면서부터는 html 대신에 모든 소스파일은 jsp로 한다.
			단, 비동기 통신을 사용할 때에는 html로 한다.
			
	4) jsp를 처리하기 위해서는 반드시 was 역할을 하는것이 필요하다.
		▶ 우리는 Tomcat을 사용 >>> was 서버(웹 컨테이너 기능)가 있어야 한다.
		
	5) 웹에서 사용할 라이브러리는 build path 설정으로 하지 않고,
		webapp의 하위 폴더 중 [WEB-INF] - [lib] 폴더에 라이브러리를 복붙하여 가져와야 한다.
		
	6) 웹 컨테이너가 처리할 설정 파일(배포 기술자) web.xml을 필요로 한다.
		▶ 개발자 웹 프로젝트에 없으면 톰캣의 web.xml을 기본으로 한다.
		
	7)실행시 오류가 발생했을 때 오류를 수정한 뒤
		- '.java'를 수정하고 저장하면 자동으로 빌드하고 Tomcat이 프로젝트를 새롭게 로드함
		- '.jsp'를 수정하고 저장한 뒤에는 브라우저에서 새로고침만 하면 된다.
		▶ 위 내용들은 정상 동작 할 경우이다. 비정상적으로 수정된 코드가 반영이 안되면 톰캣을 재시작해야 한다.

# JSP 와 관련된 문법 요소
	- 요청된 jsp 파일은 웹 컨테이너가 '.java' 자바 소스파일로 변경 ▶ 컴파일
		▶ .class 파일을 was 서버가 저장해 놓음 ▶ 웹 컨테이너4(was 서버) ▶ html 파일로 변경 ▶ 사용자 브라우저에게 전달
		
	※ jsp파일을 실행 후 [소스파일보기]를 선택하면, 소스파일에는 자바 코드가 존재하지 않음
	
# JSP 기본 문법
	1) 스크립트릿 : <%  %>
		▶ 자바 코드 작성
	
	2) 표현식 : <%=  %>	※ 자바 스크립트 표현식 기호 ${}를 jsp 에서는 el 이라고 부른다.
		▶ 태그 요소에 출력 내용(자바 변수, 수식, 메소드, ...) 작성
		
	3) 지시자 : <%@  %> ▶ jsp 설정 관련
	- page 지시자 : <%@ page  %> ▶ 언어 설정,import 등 jsp 파일에서는 필수적인 지시자
	- include 지시자 : <%@ include  %> ▶ file="파일명" . file 속성으로 지정된 소스코드를 포함시킴
	
	4) 선언부 : <%!   %>
		▶ 변수와 메소드 선언
		- 변수는 스크립트릿 안에서 선언하고 쓰는것이 일반적이다.
		- 메소드는 자바 소스파일로 작성해서 쓰는것이 바람직하므로 거의 사용되지 않는다.
			▷ html 태그들과 자바 코드를 분리하기 위한 목적
	
# 내장(embeded)객체
	1) out : html 문서에 출력하지 위한 객체.
		▶ 태그, 스타일, 자바스크립트를 html 문서에 출력하면 동작된다.
	
	2) request : 요청. 사용자가 보낸 요청에 대한 정보를 저장하는 객체.
		▶ 서블릿에서 메소드 인자로 선언

	※ 자세한 메소드 실행은 2request.jsp 참고
	
	● 이클립스에서 IPv4 로 표시되게 설정을 바꾸기
		[Run] ▶ [Run Configurations] ▶ Tomcat v9.0 Server at localhost
					▶ Arguments ▶ 한줄 띄어쓰기 후 다음 내용 복붙 후 [재시작] -Djava.net.preferIPv4Stack=true
	
	2-2) request 의 파라미터 사용
		▶ 사용자는 처리할 데이터를 request(요청)으로 보낸다.
			▶ 보내는 방법은 다음 2가지이다.
				[1] URL 의 쿼리스트링
					- 1) <a> 태그 href 속성값으로 하기
					- 2) 자바스크립트의 location.href = '요청URL과 쿼리스트링' 사용하기
				[2] form 태그 사용
				
		● 요청으로 전달받은 데이터(파라미터)를 서버에서 받을때는 request 객체를 사용한다.
			ㄴ 메소드는 getParameter()
	
# URL, URL, context
	- URL : 웹 주소
	- URI : 동일한 서버와 포트 위치 안에서 자원을 식별하는 부분
	- context : 맥락, 문맥(프로젝트 이름이라 생각하면 됨)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
● 숙제
- <form action=""> 중 action 은 input 데이터를 전달받고 처리할 URL 이다.
	▶ memberSave.jsp를 만들기.
	▶ 그리고 전달받은 파라미터로 update를 실행하기.
	※ memberSave.jsp 파일에는 자바코드만 작성하고 태그는 필요없다.
